#! /usr/bin/env sh

set -e

__numonic_git_fork_done() {
	branch=
	remote=

	while :; do
		case $1 in
			--help)
				man git-fork-done
				return 0
				;;
			-dr|--dry-run)
				dry_run=1
				;;
			--debug)
				debug=1
				;;
			--branch)
				branch="${2}"
				shift
				;;
			--branch=*)
				branch="${1#*=}"
				;;
			--remote)
				remote="${2}"
				shift
				;;
			--remote=*)
				remote="${1#*=}"
				;;
			?*)
				if [ -z "${branch:-}" ]; then
					branch="${1}"
				elif [ -z "${remote:-}" ]; then
					remote="${1}"
				else
					print-fail "git fork-done: too many arguments, argument: ${1} is unexpected"
					man git-fork-done | cat 1>&2
					return 1
				fi
				;;
			*)
				break
				;;
		esac
		shift
	done

	if [ -z "${branch:-}" ]; then
		branch="next"
	fi

	if [ -z "${remote:-}" ]; then
		remote="upstream"
	fi

	for current in "${branch}" develop next main master; do
		if git show-ref --quiet --verify "refs/heads/${current}"; then
			branch="${current}"
			break
		fi
	done

	print-warn '' \
		'GIT FORK DONE' \
		"branch: ${branch}" \
		"remote: ${remote}" \
	''

	if [ -n "${dry_run:-}" ]; then
		return 0
	fi

	(
		if [ -n "${debug:-}" ]; then
			set -x
		fi

		# complete the branch with the origin
		git-done --branch="${branch}" --remote=origin

		# prune the upstream branch list
		git-remote-prune --remote="${remote}"

		# pull any changes from all other remotes
		git pull --all

		# merge the origin with any changes from the upstream
		git merge --ff-only "${remote}"/"${branch}"

		# push the changes to the origin
		git push origin "${branch}"
	)
}

__numonic_git_fork_done "$@"
